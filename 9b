#include <stdio.h> 
#include <stdlib.h>
#include <stdbool.h>
typedef 
struct AdjListNode {
int dest;
struct AdjListNode* next;
} AdjListNode;
typedef 
struct AdjList {
struct AdjListNode *head;
} AdjList;
typedef 
struct Graph {
int V;
struct AdjList* array;
} Graph;
AdjListNode* newAdjListNode(int dest) {
AdjListNode* newNode = (AdjListNode*)malloc(sizeof(AdjListNode)); newNode->dest = dest;
newNode->next = NULL; return newNode;
}
Graph* createGraph(int V) {
Graph* graph = (Graph*)malloc(sizeof(Graph)); graph->V = V;
graph->array = (AdjList*)malloc(V * sizeof(AdjList)); for (int i = 0; i < V; ++i)
graph->array[i].head = NULL; return graph;
}
void addEdge(Graph* graph, int src, int dest) {
AdjListNode* newNode = newAdjListNode(dest); newNode->next = graph->array[src].head;
graph->array[src].head = newNode;

newNode = newAdjListNode(src);
newNode->next = graph->array[dest].head; graph->array[dest].head = newNode;
}

void BFS(Graph* graph, int startVertex) {
bool *visited = (bool*)malloc(graph->V * sizeof(bool));
for (int i = 0; i < graph->V; i++) visited[i] = false;
int *queue = (int*)malloc(graph->V * sizeof(int)); int front = 0;
int rear = 0;
visited[startVertex] = true;
queue[rear++] = startVertex;
while (front < rear) {
int currentVertex = queue[front++];
printf("%d ", currentVertex);
AdjListNode* adjList = graph->array[currentVertex].head; while (adjList != NULL) {
int adjVertex = adjList->dest; if (!visited[adjVertex]) {
visited[adjVertex] = true; queue[rear++] = adjVertex;
}
adjList = adjList->next;
}
}
free(visited);
free(queue);
}
void printGraph(Graph* graph) {
for (int v = 0; v < graph->V; ++v) {
AdjListNode* pCrawl = graph->array[v].head;
printf("\n Adjacency list of vertex %d\n head ", v); while (pCrawl) {
printf("-> %d", pCrawl->dest);
pCrawl = pCrawl->next;
}
printf("\n");
}
}
int main() { int V = 5;
Graph* graph = createGraph(V);
addEdge(graph, 0, 1);
addEdge(graph, 0, 4);
addEdge(graph, 1, 2);
addEdge(graph, 1, 3);
addEdge(graph, 1, 4);
addEdge(graph, 2, 3);
addEdge(graph, 3, 4);
printf("Graph adjacency list:\n");
printGraph(graph);
printf("\nBreadth First Traversal starting from vertex 0:\n");
BFS(graph, 0);
return 0;
}
