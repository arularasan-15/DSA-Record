#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* left; 
struct Node* right;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
struct Node* insertNode(struct Node* root, int data) {
if (root == NULL) return createNode(data);
if (data < root->data)
root->left = insertNode(root->left, data);
else if (data > root->data)
root->right = insertNode(root->right, data);
return root;
}
struct Node* findMin(struct Node* root) {
while (root->left != NULL) root = root->left;
return root;
}
struct Node* deleteNode(struct Node* root, int data) {
if (root == NULL) return root;
if (data < root->data)
root->left = deleteNode(root->left, data);
else if (data > root->data)
root->right = deleteNode(root->right, data);
else {
if (root->left == NULL) {
    struct Node* temp = root->right; 
free(root);
return temp;
} else if (root->right == NULL) {
        struct Node* temp = root->left; free(root);
return temp;
}
struct Node* temp = findMin(root->right);
root->data = temp->data;
root->right = deleteNode(root->right, temp->data);
}
return root;
}
struct Node* searchNode(struct Node* root, int data) {
if (root == NULL || root->data == data)
return root;
if (data < root->data)
return searchNode(root->left, data);
else
return searchNode(root->right, data);
}
void inorderTraversal(struct Node* root) {
if (root == NULL) return; inorderTraversal(root->left);
printf("%d ", root->data); inorderTraversal(root->right);
}
int main() {
struct Node* root = NULL;
int choice, data;
while (1) {
printf("\nBinary Search Tree Operations:\n");
printf("1. Insert\n2. Delete\n3. Search\n4. Display (Inorder Traversal)\n5. Exit\n"); 
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
    case 1:
printf("Enter the value to insert: ");
scanf("%d", &data);
root = insertNode(root, data); 
break;
case 2:
printf("Enter the value to delete: ");
scanf("%d", &data);
root = deleteNode(root, data);
break;
case 3:
printf("Enter the value to search: ");
scanf("%d", &data);
struct Node* result = searchNode(root, data);
if (result != NULL)
printf("Value %d found in the tree.\n", data); else
printf("Value %d not found in the tree.\n", data); break;
case 4:
printf("Inorder Traversal: ");
inorderTraversal(root);
printf("\n");
break; 
case 5:
exit(0); default:
printf("Invalid choice! Please try again.\n");
}
}
return 0;
}
